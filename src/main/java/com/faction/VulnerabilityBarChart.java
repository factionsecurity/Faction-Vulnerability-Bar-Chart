package com.faction;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import com.faction.elements.Assessment;
import com.faction.elements.BaseExtension;
import com.faction.elements.Vulnerability;
import com.faction.elements.results.AssessmentManagerResult;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartUtils;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberTickUnit;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.StandardBarPainter;
import org.jfree.chart.renderer.category.CategoryItemRenderer;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.sonatype.plexus.components.cipher.Base64;

import java.awt.Color;
import java.awt.Font;
import java.awt.Paint;
import java.io.ByteArrayOutputStream;
import java.io.IOException;

public class VulnerabilityBarChart extends BaseExtension implements com.faction.extender.ReportManager {

	private int totalLevels = 6;
	private LinkedHashMap<String,Color> severities = new LinkedHashMap<>();
	
	
	@Override
	public String reportCreate(Assessment asmt, List<Vulnerability> vulns, String reportText) {
		this.setUpSeverities();
		try {
			String vulnChartImage = this.vulnSeverityChartImage(vulns, reportText);
			return reportText.replaceAll("\\$\\{faction-bar-chart\\}", vulnChartImage);
		} catch (IOException e) {
			e.printStackTrace();
		}
		return reportText;
	}

	/**
	 * This section represents the getters from the user supplied configs
	 * 
	 */
	private void setUpSeverities() {
		String colorsCSV = this.getConfigs().get("Severity Colors");
		String w = this.getConfigs().get("Width");
		if(colorsCSV == null || colorsCSV.trim().equals("")) {
			severities.put("Critical", new Color(0xdd4b39));
			severities.put("High", new Color(0xf39c12));
			severities.put("Medium", new Color(0x00c0ef));
			severities.put("Low", new Color(0x39cccc));
			severities.put("Recommended", new Color(0x00a65a));
			severities.put("Informational", new Color(0x95a5a6));
		}else {
			String [] colors = colorsCSV.split(",");
			this.severities = Arrays
					.stream(colors)
					.map( color -> color.split(":"))
					.collect(Collectors.toMap(
							keyValue -> keyValue[0],
							keyValue -> new Color(Integer.parseInt(keyValue[1].trim(), 16)),
							(v1,v2) -> v1,
							LinkedHashMap<String, Color>::new
					));
			this.totalLevels = colors.length;
			
			String [] sevs = this.severities.keySet().toArray(new String[0]);
			
		}
		
	}
	private Paint[] getColors() {
		String colorsCSV = this.getConfigs().get("Severity Colors");
		if(colorsCSV == null || colorsCSV.trim().equals("")) {
			return new Paint[] { new Color(0xdd4b39), 
					new Color(0xf39c12), 
					new Color(0x00c0ef), 
					new Color(0x39cccc),
					new Color(0x00a65a), 
					new Color(0x95a5a6) };
			
		}else {
			return this.severities.values().stream().toArray(Paint[]::new);
		}
	}
	
	private Paint [] getDefaultColor() {
		String defaultColor = this.getConfigs().get("Default Color");
		if(defaultColor == null || defaultColor.trim().equals("")) {
			return new Paint[] { new Color(0x95a5a6) }; // Default Color
		}else {
			return new Paint[] {new Color(Integer.parseInt(defaultColor.trim(), 16)) };
		}
	}
	
	private int [] getDimensions() {
		int [] dimensions = {900, 600};
		String w = this.getConfigs().get("Width");
		String h = this.getConfigs().get("Height");
		
		
		if(w != null && !w.trim().equals(""))
			dimensions[0] = Integer.parseInt(w);
		
		if(h != null && !h.trim().equals(""))
			dimensions[1] = Integer.parseInt(h);
		
		return dimensions;
	}
	
	/**
	 *  This section covers everything thats needed to generate the bar chart
	 * 
	 */
	
	private String vulnSeverityChartImage(List<Vulnerability> vulns, String reportText) throws IOException {
		
			CategoryDataset dataset = createDataset(vulns);

			JFreeChart chart = createChart(dataset);
			//set clear background
			chart.getPlot().setBackgroundPaint( new Color(0,0,0,0));
			chart.getPlot().setBackgroundImageAlpha(0);
			// set bar colors
			final CategoryItemRenderer renderer = new CustomRenderer(this.getColors(), this.getDefaultColor());
			final CategoryPlot plot = chart.getCategoryPlot();
			//Match Font
			Font font = new Font("Arial", Font.PLAIN, 25);
			plot.getDomainAxis().setLabelFont(font);
			plot.getRangeAxis().setLabelFont(font);
			// remove bar gradient and shaddow
			((BarRenderer) renderer).setBarPainter(new StandardBarPainter());
			((BarRenderer) renderer).setShadowVisible(false);
			plot.setRenderer(renderer);
			// Show mininal gridlines
			plot.setRangeGridlinesVisible(false);
			plot.setRangeMinorGridlinesVisible(false);
			plot.setOutlineVisible(false);
			plot.setDomainCrosshairVisible(false);
			plot.setDomainGridlinesVisible(false);
			//set tick unit so we don't get decimals in the Y axis
			((NumberAxis) plot.getRangeAxis()).setTickUnit(new NumberTickUnit(1));
			ByteArrayOutputStream baos = new ByteArrayOutputStream();
			int [] dimensions = this.getDimensions();
			ChartUtils.writeChartAsPNG(baos, chart, dimensions[0], dimensions[1], false, 0);
			// create a data url for image tag
			byte[] base64Bytes = Base64.encodeBase64(baos.toByteArray());
			String base64Png = new String(base64Bytes);
			String image = "<img class='faction-vuln-chart' src='data:image/png;base64," + base64Png + "'></img>";
			return image;
	}
	

	private CategoryDataset createDataset(List<Vulnerability> vulns) {
		
		DefaultCategoryDataset dataset = new DefaultCategoryDataset();
		String [] severityNames = (String[]) this.severities.keySet().toArray(new String[0]);
		for(int level=totalLevels-1; level >=0; level-- ) {
			final int index = level;
			long count = vulns.stream().filter(v -> v.getOverall().equals(new Long(index))).count();
			dataset.setValue(count, "Severity", severityNames[this.totalLevels - index -1]);
		}
		return dataset;
	}

	private JFreeChart createChart(CategoryDataset dataset) {

		JFreeChart barChart = ChartFactory.createBarChart("", "", "Severity", dataset, PlotOrientation.VERTICAL, false,
				true, false);
		return barChart;
	}

	class CustomRenderer extends BarRenderer {

		private Paint[] colors;
		private Paint[] defaultColor;

		public CustomRenderer(final Paint[] colors, final Paint[] defaultColor ) {
			this.colors = colors;
		}

		public Paint getItemPaint(final int row, final int column) {
			if (column >= this.colors.length) {
				Paint[] defaultPaint = this.defaultColor;
				return defaultPaint[0];
			}
			return this.colors[column % this.colors.length];
		}
	}


}
